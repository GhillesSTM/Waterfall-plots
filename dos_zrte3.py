# -*- coding: utf-8 -*-
"""DOS-zrte3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18AIDSZs8QFgS6l3ZZ-lybsonxP1da5ue
"""

import numpy as np
import matplotlib.pyplot as plt

# Load the data from the file with the specified path
file_path = '/content/sample_data/ZrTe3-7x3-8-Hf-sub.pdos_tot'
data = np.genfromtxt(file_path, delimiter=None, invalid_raise=False)

# Extract the energy and DOS values
fermi_energy = 7.1245  # Fermi energy in eV
energy = data[:, 0] - fermi_energy  # Subtract Fermi energy from energy values
dos = data[:, 2]

# Set up the plot
plt.figure(figsize=(8, 6))
plt.plot(energy, dos, label='DOS', color='blue', linewidth=1)

# Add title and labels
plt.title('Density of States', fontsize=14, fontname='Verdana')
plt.xlabel('Energy (eV)', fontsize=12, fontname='Verdana')
plt.ylabel('DOS', fontsize=12, fontname='Verdana')

# Set y-limits based on actual data or remove plt.ylim to automatically adjust
plt.xlim(0, 1)  # Updated x-range for both datasets
plt.ylim(20, 40)  # Y-range for both datasets
# plt.xticks(np.arange(-1, 2, 0.2))
# plt.yticks(np.arange(0, 250, 15))

# Add grid
plt.grid(True)

# Save the plot as a PNG image
plt.savefig('dos_plot.png', dpi=100)

# Show the plot
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# First dataset file path
file_path_1 = '/content/sample_data/ZrTe3-7x3-pristine.pdos_tot'
data_1 = np.loadtxt(file_path_1)

# Second dataset file path
file_path_2 = '/content/sample_data/ZrTe3-7x3-8-Hf-sub.pdos_tot'
data_2 = np.loadtxt(file_path_2)

# Fermi energy for each dataset
fermi_energy_1 =  7.1270 # Fermi energy for pristine
fermi_energy_2 = 7.1245  # Fermi energy for the second dataset

# Extract the energy and DOS values, and subtract Fermi energy
energy_1 = data_1[:, 0] - fermi_energy_1
dos_1 = data_1[:, 1]

energy_2 = data_2[:, 0] - fermi_energy_2
dos_2 = data_2[:, 1]

# Set up the plot
plt.figure(figsize=(8, 6))

# Plot the first dataset


plt.plot(energy_1, dos_1, label='pristine', color='black', linewidth=1)
# Plot the second dataset
plt.plot(energy_2, dos_2, label='8 Hf substitution for Zr', color='blue', linewidth=1, linestyle='-')


# Add title and labels
#plt.title('Te-surface-vac-Density of States', fontsize=24, fontname='Verdana')
plt.xlabel('Energy (eV)', fontsize=24, fontname='Verdana')
plt.ylabel('Density of States', fontsize=24, fontname='Verdana')
plt.tick_params(axis='both', which='major', labelsize=13)
# Set x and y ranges
plt.xlim(0, 1)  # Updated x-range for both datasets
plt.ylim(28, 50)
# Add gri5d
plt.grid(False)

# Add legend to distinguish between the two datasets
plt.legend(fontsize=16)

# Save the plot as a PNG image
plt.savefig('combined_dos_plot.png', dpi=100)

# Show the plot
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# First dataset file path
file_path_1 = '/content/DOS/ZrTe3-6x3-Te-subsurface-vac-7.0674 ev.pdos_tot'
data_1 = np.loadtxt(file_path_1)

# Second dataset file path
file_path_2 = '/content/DOS/ZrTe3-6x3-Te-surface-vac-7.0700 ev.pdos_tot'
data_2 = np.loadtxt(file_path_2)

# Third dataset file path
file_path_3 = '/content/DOS/ZrTe3-6x3-pristine-7.1289 ev.pdos_tot'
data_3 = np.loadtxt(file_path_3)

# Fermi energy for each dataset
fermi_energy_1 = 7.0674  # Fermi energy for the first dataset
fermi_energy_2 = 7.070  # Fermi energy for the second dataset
fermi_energy_3 = 7.1289  # Fermi energy for the third dataset

# Extract the energy and DOS values, and subtract Fermi energy
energy_1 = data_1[:, 0] - fermi_energy_1
dos_1 = data_1[:, 1]

energy_2 = data_2[:, 0] - fermi_energy_2
dos_2 = data_2[:, 1]

energy_3 = data_3[:, 0] - fermi_energy_3
dos_3 = data_3[:, 1]

# Set up the plot
plt.figure(figsize=(8, 6))

# Plot the first dataset
plt.plot(energy_1, dos_1, label='Te-subsurface-vac (7.0674 ev Fermi)', color='blue', linewidth=1)

# Plot the second dataset
plt.plot(energy_2, dos_2, label='6x3-Te-surface-vac (7.070 eV Fermi)', color='red', linewidth=1)

# Plot the third dataset
plt.plot(energy_3, dos_3, label='6x3-pristine (7.1289 eV Fermi)', color='green', linewidth=1)

# Add title and labels
plt.title('Density of States', fontsize=14, fontname='Verdana')
plt.xlabel('Energy (eV)', fontsize=12, fontname='Verdana')
plt.ylabel('DOS', fontsize=12, fontname='Verdana')

# Set x and y ranges
plt.xlim(-2, 2)  # Updated x-range for all datasets
plt.ylim(20, 250)  # Y-range for all datasets

# Add grid
plt.grid(True)

# Add legend to distinguish between the three datasets
plt.legend()

# Save the plot as a PNG image
plt.savefig('combined_dos_plot_with_third.png', dpi=100)

# Show the plot
plt.show()

"""code to plot individual orbitals of a single atom"""

import numpy as np
import matplotlib.pyplot as plt
import os

# Function to extract the file path for a specific atom, type (Te or Zr), and specific orbital (e.g., 1s, 2p, etc.)
def get_file_path(folder, atom_num, atom_type, orbital_level, orbital_type):
    # List all files in the folder
    files = os.listdir(folder)
    # Construct the exact file pattern to match the specific atom, type, and orbital (e.g., 1s, 2p)
    file_pattern = f"pdos_atm#{atom_num}({atom_type})_wfc#{orbital_level}({orbital_type})"
    # Search for the file that contains the atom number, atom type, and orbital level/type
    for file in files:
        if file_pattern in file:
            return os.path.join(folder, file)
    return None

# Function to plot energy vs PDOS for all orbitals of a specific atom
def plot_pdos(folder, atom_num, atom_type, orbital_level, orbital_type, fermi_energy):
    # Get the file path for the specific atom, type, and orbital
    file_path = get_file_path(folder, atom_num, atom_type, orbital_level, orbital_type)

    if file_path is None:
        print(f"File for atom {atom_num} ({atom_type}), orbital {orbital_level}{orbital_type} not found.")
        return

    # Load the data from the file
    data = np.genfromtxt(file_path, delimiter=None, invalid_raise=False)

    # Extract the energy and DOS values
    energy = data[:, 0] - fermi_energy  # Subtract Fermi energy from energy values
    ldos = data[:, 1]  # Local DOS (second column)

    # Number of PDOS columns based on orbital type
    if orbital_type == 's':
        pdos_columns = [2]  # One PDOS column for 's'
    elif orbital_type == 'p':
        pdos_columns = [2, 3, 4]  # Three PDOS columns for 'p' orbitals
    elif orbital_type == 'd':
        pdos_columns = [2, 3, 4, 5, 6]  # Five PDOS columns for 'd' orbitals
    else:
        print(f"Unsupported orbital type: {orbital_type}")
        return

    # Set up the plot
    plt.figure(figsize=(8, 6))

    # Plot LDOS
    plt.plot(energy, ldos, label=f'LDOS (Atom {atom_num}, {atom_type})', linewidth=1)



    # Add title and labels
    plt.title(f'PDOS for Atom {atom_num} ({atom_type}), Orbital {orbital_level}{orbital_type}', fontsize=14)
    plt.xlabel('Energy (eV)', fontsize=12)
    plt.ylabel('DOS', fontsize=12)

    # Set energy limits
    plt.xlim(-0.5, 1.2)
    plt.ylim(0.05, 0.5)
    # Add grid and legend
    plt.grid(True)
    plt.legend()

    # Save the plot as a PNG image
    plt.savefig(f'pdos_atom_{atom_num}_{atom_type}_{orbital_level}{orbital_type}.png', dpi=100)

    # Show the plot
    plt.show()

# Define folder containing PDOS files, atom number, atom type, orbital level, orbital type, and Fermi energy
folder = '/content/sample_data/DOS'  # Folder path
# atom_num = 114# Example atom number
# atom_type = 'Te'  # Specify whether it is 'Te' or 'Zr'
# orbital_level = 2  # Orbital level (e.g., 1, 2, 3, 4, etc.)
# orbital_type = 'p'  # Orbital type (e.g., s, p, d)
# fermi_energy = 7.07  # Fermi energy in eV
######
atom_num = 55 # Example atom number
atom_type = 'Zr'  # Specify whether it is 'Te' or 'Zr'
orbital_level = 5  # Orbital level (e.g., 1, 2, 3, 4, etc.)
orbital_type = 'd'  # Orbital type (e.g., s, p, d)
fermi_energy = 7.07
###########
# Call the function to plot PDOS
plot_pdos(folder, atom_num, atom_type, orbital_level, orbital_type, fermi_energy)

"""code to sum and plot all the orbitals of all the atoms of the same type"""

import numpy as np
import matplotlib.pyplot as plt
import os

# Function to extract all file paths for a specific atom type and orbital
def get_all_orbital_files(folder, atom_type, orbital_level, orbital_type):
    files = os.listdir(folder)
    file_pattern = f"({atom_type})_wfc#{orbital_level}({orbital_type})"
    orbital_files = [os.path.join(folder, file) for file in files if file_pattern in file]
    return orbital_files

# Function to load and sum LDOS and PDOS for a specific atom type and orbital
def load_summed_ldos_pdos(folder, atom_type, orbital_level, orbital_type, fermi_energy):
    orbital_files = get_all_orbital_files(folder, atom_type, orbital_level, orbital_type)
    if not orbital_files:
        print(f"No files found for {atom_type} atoms with orbital {orbital_level}{orbital_type}.")
        return None, None, None

    summed_ldos = None
    summed_pdos = None
    energy = None

    for file_path in orbital_files:
        data = np.genfromtxt(file_path, delimiter=None, invalid_raise=False)
        energy = data[:, 0] - fermi_energy
        ldos_column = data[:, 1]
        pdos_columns = data[:, 2:]

        if summed_ldos is None:
            summed_ldos = ldos_column
        else:
            summed_ldos += ldos_column

        if summed_pdos is None:
            summed_pdos = np.sum(pdos_columns, axis=1)
        else:
            summed_pdos += np.sum(pdos_columns, axis=1)

    return energy, summed_ldos, summed_pdos

# Function to plot specified LDOS and PDOS for different atom types and orbitals
def plot_specified_ldos_pdos(folder, configurations, fermi_energy, plot_individual=True):
    # Set up the plot
    plt.figure(figsize=(8, 6))

    # Colors for different configurations
    colors = ['blue', 'green', 'red', 'purple', 'cyan', 'orange']

    total_ldos = None
    total_pdos = None
    energy = None

    # Loop through each configuration (atom type and orbital)
    for i, config in enumerate(configurations):
        atom_type, orbital_level, orbital_type = config
        energy, summed_ldos, summed_pdos = load_summed_ldos_pdos(folder, atom_type, orbital_level, orbital_type, fermi_energy)

        if energy is None or summed_ldos is None or summed_pdos is None:
            continue

        # Plot LDOS and PDOS for the current configuration if plot_individual is True
       # if plot_individual:
        #    plt.plot(energy, summed_ldos, label=f'{atom_type} {orbital_level}{orbital_type} LDOS', linewidth=1, color=colors[i % len(colors)])
        if plot_individual:
            plt.plot(energy, summed_ldos, label=f'{atom_type} {orbital_type} LDOS', linewidth=1, color=colors[i % len(colors)])

        # Accumulate total LDOS and PDOS
        if total_ldos is None:
            total_ldos = summed_ldos
            total_pdos = summed_pdos
        else:
            total_ldos += summed_ldos
            total_pdos += summed_pdos

    # Plot the total LDOS only if it was calculated
    if total_ldos is not None:
        plt.plot(energy, total_ldos, label='Total LDOS', linewidth=1.5, color='black')

    # Add title and labels
    plt.title('Summed LDOS and PDOS for Specified Atoms and Orbitals', fontsize=14)
    plt.xlabel('Energy (eV)', fontsize=12)
    plt.ylabel('DOS', fontsize=12)
    plt.xlim(-5, 5)
    plt.ylim(0, 250)
#    plt.yticks(np.arange(0, 24, 3))
#    plt.xticks(np.arange(0, 1, 0.1))

    # Add grid and legend
    plt.grid(True)
    plt.legend()

    # Save the plot as a PNG image
    plt.savefig('specified_ldos_pdos.png', dpi=100)

    # Show the plot
    plt.show()

# Define folder containing PDOS files and configurations
folder = '/content/sample_data/Te surface vacancy'  # Folder path
fermi_energy = 7.4  # Fermi energy in eV

# Specify the configurations of atoms and orbitals to sum
configurations = [
     ('Te', 2, 'p')  # Te 2p
    #,('Zr', 4, 'd')   # Zr 5d

]

# Call the function to plot the specified LDOS and PDOS for the given configurations
# Set plot_individual=False if you only want to plot the total LDOS
plot_specified_ldos_pdos(folder, configurations, fermi_energy, plot_individual=True)

"""code to plot the sum of selected atoms and orbitals"""

import numpy as np
import matplotlib.pyplot as plt
import os

# Function to extract the file path for a specific atom, type (Te or Zr), and specific orbital (e.g., 1s, 2p, etc.)
def get_file_path(folder, atom_num, atom_type, orbital_level, orbital_type):
    files = os.listdir(folder)
    file_pattern = f"pdos_atm#{atom_num}({atom_type})_wfc#{orbital_level}({orbital_type})"
    for file in files:
        if file_pattern in file:
            return os.path.join(folder, file)
    return None

# Function to load PDOS data for a specific atom
def load_pdos_data(folder, atom_num, atom_type, orbital_level, orbital_type, fermi_energy):
    file_path = get_file_path(folder, atom_num, atom_type, orbital_level, orbital_type)
    if file_path is None:
        print(f"File for atom {atom_num} ({atom_type}), orbital {orbital_level}{orbital_type} not found.")
        return None, None
    data = np.genfromtxt(file_path, delimiter=None, invalid_raise=False)
    energy = data[:, 0] - fermi_energy
    ldos = data[:, 1]
    return energy, ldos

# Function to calculate the average PDOS and plot
def plot_average_pdos(folder, atoms, fermi_energy):
    total_ldos = None
    energy = None
    num_atoms = len(atoms)

    for atom in atoms:
        atom_num, atom_type, orbital_level, orbital_type = atom
        energy, ldos = load_pdos_data(folder, atom_num, atom_type, orbital_level, orbital_type, fermi_energy)
        if ldos is None:
            continue
        if total_ldos is None:
            total_ldos = ldos
        else:
            total_ldos += ldos

    if energy is None or total_ldos is None:
        print("No data available for the specified atoms.")
        return

    average_ldos = total_ldos / num_atoms

    # Save the energy and total LDOS to a text file for the range -0.5 to 0.5
    output_file = "total_ldos_data_filtered.txt"
    mask = (energy >= -0.5) & (energy <= 0.5)
    filtered_energy = energy[mask]
    filtered_ldos = total_ldos[mask]
    output_data = np.column_stack((filtered_energy, filtered_ldos))
    np.savetxt(output_file, output_data, header="Energy (eV), Total LDOS", comments='', fmt='%0.6f', delimiter=',')
    print(f"Filtered data saved to {output_file}")

    # Set up the plot
    plt.figure(figsize=(8, 6))
    plt.plot(energy, total_ldos, label='Total LDOS', linewidth=1, color='blue')
    plt.title(f'Total LDOS', fontsize=14)
    plt.xlabel('Energy (eV)', fontsize=8)
    plt.ylabel('DOS', fontsize=8)
    plt.xlim(-0.5, 0.5)
    plt.ylim(0, 10)
    plt.grid(True)
    plt.legend()
    plt.savefig('average_pdos.png', dpi=100)
    plt.show()

##### Zr Vacancy ######
atoms = [
    #####   Te ions  ####
   ##### within defect Te ions ####
    ############# top edge of defects Te ions ###########
    # (21, 'Te', 1, 's'),
    # (21, 'Te', 2, 'p'),
    # (19, 'Te', 1, 's'),  # Example atom 1
    # (19, 'Te', 2, 'p'),
    # (11, 'Te', 1, 's'),  # Example atom 1
    # (11, 'Te', 2, 'p'),
    # (13, 'Te', 1, 's'),  # Example atom 1
    # (13, 'Te', 2, 'p'),
    # (37, 'Te', 1, 's'),  # Example atom 1
    # (37, 'Te', 2, 'p'),
    # (45, 'Te', 1, 's'),  # Example atom 1
    # (45, 'Te', 2, 'p'),
#     (35, 'Te', 1, 's'),  # Example atom 1
#     (35, 'Te', 2, 'p'),
#     (43, 'Te', 1, 's'),  # Example atom 1
#     (43, 'Te', 2, 'p'),
#     (61, 'Te', 1, 's'),  # Example atom 1
#     (61, 'Te', 2, 'p'),
#     (69, 'Te', 1, 's'),  # Example atom 1
#     (69, 'Te', 2, 'p'),
#     (67, 'Te', 1, 's'),  # Example atom 1
#     (67, 'Te', 2, 'p'),
#     (59, 'Te', 1, 's'),  # Example atom 1
#     (59, 'Te', 2, 'p'),
# #     ### center defect #####
#     (85, 'Te', 1, 's'),  # Example atom 1
#       (85, 'Te', 2, 'p'),
#      (91, 'Te', 1, 's'),  # Example atom 1
#      (91, 'Te', 2, 'p'),
#       (83, 'Te', 1, 's'),  # Example atom 1
#       (83, 'Te', 2, 'p'),
#     (93, 'Te', 1, 's'),  # Example atom 1
#      (93, 'Te', 2, 'p'),

# #     ########################
#     ########### bottom edge of defects Te ions ###########

    # (108, 'Te', 1, 's'),  # Example atom 1
    # (108, 'Te', 2, 'p'),
    # (116, 'Te', 1, 's'),  # Example atom 1
    # (116, 'Te', 2, 'p'),
    # (106, 'Te', 1, 's'),  # Example atom 1
    # (106, 'Te', 2, 'p'),
    # (114, 'Te', 1, 's'),  # Example atom 1
    #  (114, 'Te', 2, 'p'),
    # # (132, 'Te', 1, 's'),  # Example atom 1
    # (132, 'Te', 2, 'p'),
    # (140, 'Te', 1, 's'),  # Example atom 1
    # (140, 'Te', 2, 'p'),
    # (130, 'Te', 1, 's'),  # Example atom 1
    # (130, 'Te', 2, 'p'),
    # (138, 'Te', 1, 's'),  # Example atom 1
    # (138, 'Te', 2, 'p'),
    # (156, 'Te', 1, 's'),  # Example atom 1
    # (156, 'Te', 2, 'p'),
    # (164, 'Te', 1, 's'),  # Example atom 1
    # (164, 'Te', 2, 'p'),
    # (162, 'Te', 1, 's'),  # Example atom 1
    # (162, 'Te', 2, 'p'),
    # (154, 'Te', 1, 's'),  # Example atom 1
    # (154, 'Te', 2, 'p'),
       ######### Away from defect #######
    ####### top Te ions ##########

#     (3, 'Te', 1, 's'),  # Example atom 1
#     (3, 'Te', 2, 'p'),
#     (5, 'Te', 1, 's'),  # Example atom 1
#     (5, 'Te', 2, 'p'),
#     (29, 'Te', 1, 's'),  # Example atom 1
#     (29, 'Te', 2, 'p'),
#     (27, 'Te', 1, 's'),  # Example atom 1
#     (27, 'Te', 2, 'p'),
#     (53, 'Te', 1, 's'),  # Example atom 1
#     (53, 'Te', 2, 'p'),
#     (51, 'Te', 1, 's'),  # Example atom 1
#     (51, 'Te', 2, 'p'),
# #     ###### away center Te ions #####
#     (77, 'Te', 1, 's'),  # Example atom 1
#     (77, 'Te', 2, 'p'),
#     (75, 'Te', 1, 's'),  # Example atom 1
#     (75, 'Te', 2, 'p'),
# # #  ######### bottom Te ions ##########
#     (100, 'Te', 1, 's'),  # Example atom 1
#     (100, 'Te', 2, 'p'),
#     (98, 'Te', 1, 's'),  # Example atom 1
#     (98, 'Te', 2, 'p'),
#     (124, 'Te', 1, 's'),  # Example atom 1
#     (124, 'Te', 2, 'p'),
#     (122, 'Te', 1, 's'),  # Example atom 1
#     (122, 'Te', 2, 'p'),
#     (148, 'Te', 1, 's'),  # Example atom 1
#     (148, 'Te', 2, 'p'),
#     (146, 'Te', 1, 's'),  # Example atom 1
#     (146, 'Te', 2, 'p'),

  #    ###  Zr ions  #####
  #   ############ top edge of defects Zr ions ###########
  #   (16, 'Zr', 2, 's'),
  #   (16, 'Zr', 4, 'p'),  # Example atom 1
  #   (16, 'Zr', 5, 'd'),
  #   (24, 'Zr', 2, 's'),
  #   (24, 'Zr', 4, 'p'),  # Example atom 1
  #   # (24, 'Zr', 5, 'd'),
  #   (48, 'Zr', 2, 's'),
  #   (48, 'Zr', 4, 'p'),  # Example atom 1
  #   (48, 'Zr', 5, 'd'),
  #   (40, 'Zr', 2, 's'),
  #   (40, 'Zr', 4, 'p'),  # Example atom 1
    # (40, 'Zr', 5, 'd'),
    #   (64, 'Zr', 2, 's'),
    #  (64, 'Zr', 4, 'p'),  # Example atom 1
    # (64, 'Zr', 5, 'd'),
    # (72, 'Zr', 2, 's'),
    # (72, 'Zr', 4, 'p'),  # Example atom 1
    # (72, 'Zr', 5, 'd'),

  # #   ######## center of defects Zr ions ######
    # (80, 'Zr', 2, 's'),
    # (80, 'Zr', 4, 'p'),  # Example atom 1
    # (80, 'Zr', 5, 'd'),
    #  (95, 'Zr', 2, 's'),
    #  (95, 'Zr', 4, 'p'),  # Example atom 1
    #  (95, 'Zr', 5, 'd'),
    # (88, 'Zr', 2, 's'),
    # (88, 'Zr', 4, 'p'),  # Example atom 1
    # (88, 'Zr', 5, 'd'),
  # # ############ bottom edge of defects Zr ions ###########
    # (119, 'Zr', 2, 's'),
    # (119, 'Zr', 4, 'p'),  # Example atom 1
    # (119, 'Zr', 5, 'd'),
    # (111, 'Zr', 2, 's'),
    # (111, 'Zr', 4, 'p'),  # Example atom 1
    #  (111, 'Zr', 5, 'd'),
  #   (143, 'Zr', 2, 's'),
  #   (143, 'Zr', 4, 'p'),  # Example atom 1
  #   (143, 'Zr', 5, 'd'),
  #   (135, 'Zr', 2, 's'),
  #   (135, 'Zr', 4, 'p'),  # Example atom 1
  #   (135, 'Zr', 5, 'd'),

  #   (159, 'Zr', 2, 's'),
  #   (159, 'Zr', 4, 'p'),  # Example atom 1
  #   (159, 'Zr', 5, 'd'),
  #   (167, 'Zr', 2, 's'),
  #   (167, 'Zr', 4, 'p'),  # Example atom 1
  #   (167, 'Zr', 5, 'd'),
  #   ######## Away from defect #######
  #   ####### top Zr ions ##########

  #   (8, 'Zr', 2, 's'),
  #   (8, 'Zr', 4, 'p'),  # Example atom 1
  #   (8, 'Zr', 5, 'd'),
  #   (32, 'Zr', 2, 's'),
  #   (32, 'Zr', 4, 'p'),  # Example atom 1
  #   (32, 'Zr', 5, 'd'),
  #   (56, 'Zr', 2, 's'),
  #   (56, 'Zr', 4, 'p'),  # Example atom 1
  #   (56, 'Zr', 5, 'd'),
  #      ######## Bottom Zr ions ##########

  #   (103, 'Zr', 2, 's'),
  #   (103, 'Zr', 4, 'p'),  # Example atom 1
  #    (103, 'Zr', 5, 'd'),
  #   (127, 'Zr', 2, 's'),
  #   (127, 'Zr', 4, 'p'),  # Example atom 1
  #   (127, 'Zr', 5, 'd'),
  #   (151, 'Zr', 2, 's'),
  #   (151, 'Zr', 4, 'p'),  # Example atom 1
  #   (151, 'Zr', 5, 'd'),

#]
##############  subsurace ###########
#########  Te ###########

#### Te surface #####
# List of atoms with their details (atom_num, atom_type, orbital_level, orbital_type)
# atoms = [
#     #####   Te ions  ####
#    ##### away from defects Te ions ####
    # (122, 'Te', 1, 's'),
    # (122, 'Te', 2, 'p'),
    # (146, 'Te', 1, 's'),  # Example atom 1
    # (146, 'Te', 2, 'p'),
    # (148, 'Te', 1, 's'),  # Example atom 1
    # (148, 'Te', 2, 'p'),#

#   #########  within defect Te ions   #######
    (11, 'Te', 1, 's'),  # Example atom 1
    (11, 'Te', 2, 'p'),
    (13, 'Te', 1, 's'),  # Example atom 1
    (13, 'Te', 2, 'p'),
    (156, 'Te', 1, 's'),  # Example atom 1
    (156, 'Te', 2, 'p'),
    (154, 'Te', 1, 's'),  # Example atom 1
    (154, 'Te', 2, 'p'),
    (37, 'Te', 1, 's'),  # Example atom 1
    (37, 'Te', 2, 'p'),
    (35, 'Te', 1, 's'),  # Example atom 1
    (35, 'Te', 2, 'p'),
    (108, 'Te', 1, 's'),  # Example atom 1
    (108, 'Te', 2, 'p'),
    (106, 'Te', 1, 's'),  # Example atom 1
    (106, 'Te', 2, 'p'),
    (84, 'Te', 1, 's'),  # Example atom 1
    (84, 'Te', 2, 'p'),
    # (132, 'Te', 1, 's'),  # Example atom 1
    # (132, 'Te', 2, 'p'),
    (59, 'Te', 1, 's'),  # Example atom 1
    (59, 'Te', 2, 'p'),
    (61, 'Te', 1, 's'),  # Example atom 1
    (61, 'Te', 2, 'p'),
    # # (130, 'Te', 1, 's'),  # Example atom 1
    # (130, 'Te', 2, 'p'),
    ####  Zr ions  #####
    # (87, 'Zr', 2, 's'),
    # (87, 'Zr', 4, 'p'),  # Example atom 1
    # (87, 'Zr', 5, 'd'),
    # (95, 'Zr', 2, 's'),
    # (95, 'Zr', 4, 'p'),  # Example atom 1
    # (95, 'Zr', 5, 'd'),
    # (80, 'Zr', 2, 's'),
    # (80, 'Zr', 4, 'p'),  # Example atom 1
    # (80, 'Zr', 5, 'd'),
    # (64, 'Zr', 2, 's'),
    # (64, 'Zr', 4, 'p'),  # Example atom 1
    # (64, 'Zr', 5, 'd'),
    # (111, 'Zr', 2, 's'),
    # (111, 'Zr', 4, 'p'),  # Example atom 1
    # (111, 'Zr', 5, 'd'),
# #     # Example atom 2
#     # Example atom 2
#   # Example atom 4
]
# Define folder containing PDOS files
folder = '/content/sample_data/Te'  # Folder path
fermi_energy = 7.48  # Fermi energy in eV
# Call the function to plot average PDOS
plot_average_pdos(folder, atoms, fermi_energy)

"""code to plot total dos and total dos for ZR and Te, we also have the option to select specific orbitals"""

import numpy as np
import matplotlib.pyplot as plt
import os

# Function to load and sum specified PDOS data for a specific atom type
def load_and_sum_specified_orbitals(folder, atom_type, orbitals, fermi_energy):
    total_dos = None
    energy = None
    files = os.listdir(folder)

    # Loop through all files and filter by atom type and specified orbitals
    for file in files:
        if f"({atom_type})" in file:
            for orbital_level, orbital_type in orbitals:
                file_pattern = f"wfc#{orbital_level}({orbital_type})"
                if file_pattern in file:
                    file_path = os.path.join(folder, file)
                    # Load the data from the file
                    data = np.genfromtxt(file_path, delimiter=None, invalid_raise=False)
                    if energy is None:
                        energy = data[:, 0] - fermi_energy  # Subtract Fermi energy from energy values
                    dos = np.sum(data[:, 1:], axis=1)  # Sum all DOS columns (LDOS and PDOS)

                    # Sum DOS across all specified orbitals
                    if total_dos is None:
                        total_dos = dos
                    else:
                        total_dos += dos

    if total_dos is None:
        print(f"No data found for atom type {atom_type} with specified orbitals.")
        return None, None

    return energy, total_dos

# Function to plot the sum of specified orbitals for Zr, Te, and the combined total
def plot_all_orbitals_and_total(folder, fermi_energy):
    # Set up the plot
    plt.figure(figsize=(8, 6))

    # List of atom types and corresponding orbitals
    atom_orbital_configs = [
          ('Te', [(1, 's'),]),
        ('Te', [ (2, 'p')])
    ]
    colors = ['blue', 'red']  # Colors for each atom type
    total_combined_dos = None
    energy = None

    # Loop through each atom type and its orbitals
    for i, (atom_type, orbitals) in enumerate(atom_orbital_configs):
        energy, total_dos = load_and_sum_specified_orbitals(folder, atom_type, orbitals, fermi_energy)
        if energy is None or total_dos is None:
            continue

        # Plot the total DOS for the current atom type
        plt.plot(energy, total_dos/2, label=f' {atom_type} atoms', linewidth=1.5, color=colors[i])

        # Sum the DOS across both atom types
        if total_combined_dos is None:
            total_combined_dos = total_dos
        else:
            total_combined_dos += total_dos

    # Plot the combined total DOS
   # if total_combined_dos is not None:
    #    plt.plot(energy, total_combined_dos/2, label='ZrTe3 DOS', linewidth=1.5, color='black')

    # Add title and labels
  #  plt.title('Sum of All Orbitals for Zr, Te, and Combined Total', fontsize=14)
    #plt.xlabel('Energy (eV)', fontsize=24)
    #plt.ylabel('Density of States', fontsize=24)

    # Set energy limits
    plt.xlim(-5.2,5)
    plt.ylim(0, 250 )
    plt.tick_params(axis='both', which='major', labelsize=14)
    # plt.xticks(np.arange(-3, 3, 0.5))
    # plt.yticks(np.arange(0, 150, 15))
    # Add grid and legend
    plt.grid(False)
    plt.legend(fontsize=14)

    # Save the plot as a PNG image
    plt.savefig('sum_of_all_orbitals_Zr_Te_Total.png', dpi=100)

    # Show the plot
    plt.show()

# Define folder containing PDOS files
folder = '/content/sample_data/DOS'  # Folder path
fermi_energy = 7.1289  # Fermi energy in eV

# Call the function to plot all orbitals and the total DOS
plot_all_orbitals_and_total(folder, fermi_energy)

"""Plot total DOS and plot of dos pf each orbitals"""



"""orbitals = [(1, 's'), (2, 'p')]"""

import numpy as np
import matplotlib.pyplot as plt
import os
import re

# Directory containing PDOS files
dos_directory = '/content/sample_data/pristine'

# Initialize dictionaries to store summed DOS contributions
total_dos = None
s_dos_te = None
p_dos_te = None
s_dos_zr = None
p_dos_zr = None
d_dos_zr = None
energy = None

# Define axis limits for each subplot
x_limits = (-1, 2)  # Global x-axis range
y_limits_total = (0, 50)  # Limits for total DOS
y_limits_te = (0, 50)  # Limits for Te orbitals
y_limits_zr = (0, 50)  # Limits for Zr orbitals

# Check if directory exists
if not os.path.isdir(dos_directory):
    raise FileNotFoundError(f"The directory {dos_directory} does not exist.")

# Loop through all files in the directory
valid_files = 0
for filename in os.listdir(dos_directory):
    match = re.search(r'atm#\d+\((Te|Zr)\)_wfc#\d+\((s|p|d)\)', filename)
    if match:
        atom_type, orbital_type = match.groups()
        file_path = os.path.join(dos_directory, filename)
        data = np.genfromtxt(file_path, delimiter=None, invalid_raise=False)

        if data.size == 0:
            print(f"Warning: {filename} is empty or could not be read correctly.")
            continue

        # Extract energy and DOS values
        if energy is None:
            fermi_energy = 7.037  # Assume Fermi energy in eV
            energy = data[:, 0] - fermi_energy  # Normalize energy levels

        dos_column = data[:, 1]  # DOS values in file

        if total_dos is None:
            total_dos = np.zeros_like(dos_column)
        total_dos += dos_column
        valid_files += 1

        # Identify Te and Zr contributions by orbital
        if atom_type == "Te":
            if orbital_type == "s":
                if s_dos_te is None:
                    s_dos_te = np.zeros_like(dos_column)
                s_dos_te += dos_column
            elif orbital_type == "p":
                if p_dos_te is None:
                    p_dos_te = np.zeros_like(dos_column)
                p_dos_te += dos_column
        elif atom_type == "Zr":
            if orbital_type == "s":
                if s_dos_zr is None:
                    s_dos_zr = np.zeros_like(dos_column)
                s_dos_zr += dos_column
            elif orbital_type == "p":
                if p_dos_zr is None:
                    p_dos_zr = np.zeros_like(dos_column)
                p_dos_zr += dos_column
            elif orbital_type == "d":
                if d_dos_zr is None:
                    d_dos_zr = np.zeros_like(dos_column)
                d_dos_zr += dos_column

# Ensure at least one valid file was processed
if valid_files == 0:
    raise ValueError("No valid PDOS files were processed. Check file naming and data format.")

# Set up the figure with 3 subplots
fig, axes = plt.subplots(3, 1, figsize=(8, 12), sharex=True, gridspec_kw={'hspace': 0})

# Increase tick font size
for ax in axes:
    ax.tick_params(axis='both', which='major', labelsize=18)

# First plot: Total DOS
if total_dos is not None:
    axes[0].plot(energy, total_dos, label='Total DOS', color='black', linewidth=1.5)
    #axes[0].set_ylabel('DOS', fontsize=12)
    axes[0].set_ylim(y_limits_total)
    axes[0].legend(loc='upper right', fontsize=16)
    axes[0].axvline(x=0, color='k', linestyle='dashed', linewidth=1)  # Indicate Fermi level
    axes[0].grid(True, linestyle='--', alpha=0.6)

# Second plot: Te orbitals
if s_dos_te is not None or p_dos_te is not None:
    if s_dos_te is not None:
        axes[1].plot(energy, s_dos_te, label='Te-s', color='green', linewidth=1.5)
    if p_dos_te is not None:
        axes[1].plot(energy, p_dos_te, label='Te-p', color='red', linewidth=1.5)
    axes[1].set_ylabel('DOS', fontsize=28)
    axes[1].set_ylim(y_limits_te)
    axes[1].legend(loc='upper right', fontsize=16)
    axes[1].axvline(x=0, color='k', linestyle='dashed', linewidth=1)  # Indicate Fermi level
    axes[1].grid(True, linestyle='--', alpha=0.6)

# Third plot: Zr orbitals
if s_dos_zr is not None or p_dos_zr is not None or d_dos_zr is not None:
    if s_dos_zr is not None:
        axes[2].plot(energy, s_dos_zr, label='Zr-s', color='green', linewidth=1.5)
    if p_dos_zr is not None:
        axes[2].plot(energy, p_dos_zr, label='Zr-p', color='red', linewidth=1.5)
    if d_dos_zr is not None:
        axes[2].plot(energy, d_dos_zr, label='Zr-d', color='blue', linewidth=1.5)
    axes[2].set_xlabel('Energy (eV)', fontsize=28)
   #axes[2].set_ylabel('DOS', fontsize=12)
    axes[2].set_ylim(y_limits_zr)
    axes[2].legend(loc='upper right', fontsize=16)
    axes[2].axvline(x=0, color='k', linestyle='dashed', linewidth=1)  # Indicate Fermi level
    axes[2].grid(True, linestyle='--', alpha=0.6)

# Set x-axis limits
for ax in axes:
    ax.set_xlim(x_limits)

# Adjust layout to make plots touch
plt.subplots_adjust(hspace=0)

# Save the plot
plt.savefig('dos_plot.png', dpi=100)

# Show the plot
plt.show()